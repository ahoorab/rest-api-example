<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ENABLED" elementType="Argument">
            <stringProp name="Argument.name">ENABLED</stringProp>
            <stringProp name="Argument.value">Enabled</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DISABLED" elementType="Argument">
            <stringProp name="Argument.name">DISABLED</stringProp>
            <stringProp name="Argument.value">Disabled</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CHARSET" elementType="Argument">
            <stringProp name="Argument.name">CHARSET</stringProp>
            <stringProp name="Argument.value">!#$&amp;&apos;()*+-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SHORT" elementType="Argument">
            <stringProp name="Argument.name">SHORT</stringProp>
            <stringProp name="Argument.value">32767</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BYTE" elementType="Argument">
            <stringProp name="Argument.name">BYTE</stringProp>
            <stringProp name="Argument.value">127</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="INTEGER" elementType="Argument">
            <stringProp name="Argument.name">INTEGER</stringProp>
            <stringProp name="Argument.value">2147483647</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TRUE" elementType="Argument">
            <stringProp name="Argument.name">TRUE</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FALSE" elementType="Argument">
            <stringProp name="Argument.name">FALSE</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Read application properties and set to them to jmter props map" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileInputStream;
import java.util.TimeZone;

    
TimeZone.setDefault(TimeZone.getTimeZone(&quot;EST&quot;));

String baseDir = FileServer.getFileServer().getBaseDir();

props.put(&quot;baseDir&quot;,baseDir);

String fileName = baseDir+&quot;/application.properties&quot;;

log.info(&quot;Reading properties file from &quot; + fileName);

Properties properties = new Properties();

properties.load(new FileInputStream(fileName));
for (String property : properties.keySet()) {
	String value = properties.get(property);
	log.info(&quot;Setting configuration variable &quot; + property + &quot; with value &quot; + value);
	props.put(property,value);
}
String protocol = props.get(&quot;ex.server.protocol&quot;);
String address = props.get(&quot;ex.server.address&quot;);
String port = props.get(&quot;ex.server.port&quot;);
String contextPath = props.get(&quot;ex.server.context-path&quot;);
props.put(&quot;locationHeader&quot;,protocol+&quot;://&quot;+address+&quot;:&quot;+port+&quot;/&quot;+contextPath);
log.info(&quot;Setting configuration variable locationHeader with value &quot; + props.get(&quot;locationHeader&quot;));

</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="126 /login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="response_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">response_type</stringProp>
                <stringProp name="Argument.value">code</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="Argument.value">5si0g8kp2bgdbc9nkd9uub4784</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="redirect_uri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">redirect_uri</stringProp>
                <stringProp name="Argument.value">https://sergio:8080/ex-admin-api/auth/token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">ex-admin-api.auth.us-east-1.amazoncognito.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.9) Gecko/20100101 Goanna/4.1 Firefox/60.9 PaleMoon/28.2.2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">csrf</stringProp>
            <stringProp name="RegexExtractor.regex">_csrf&quot; value=&quot;(.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="128 /login?response_type=code&amp;client_id=5si0g8kp2bgdbc9nkd9uub4784&amp;redirect_uri=https://sergio:8080/ex-admin-api/auth/token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_csrf" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_csrf</stringProp>
                <stringProp name="Argument.value">${csrf}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">sergio</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">Sergio!983</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="cognitoAsfData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">cognitoAsfData</stringProp>
                <stringProp name="Argument.value">eyJwYXlsb2FkIjoie1wiY29udGV4dERhdGFcIjp7XCJVc2VyQWdlbnRcIjpcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjYwLjkpIEdlY2tvLzIwMTAwMTAxIEdvYW5uYS80LjEgRmlyZWZveC82MC45IFBhbGVNb29uLzI4LjIuMlwiLFwiRGV2aWNlSWRcIjpcInk3NmRvamg3MTk5cW90Y3BhMDhlOjE1NDc0OTE4NjAyNDRcIixcIkRldmljZUxhbmd1YWdlXCI6XCJlbi1VU1wiLFwiRGV2aWNlRmluZ2VycHJpbnRcIjpcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjYwLjkpIEdlY2tvLzIwMTAwMTAxIEdvYW5uYS80LjEgRmlyZWZveC82MC45IFBhbGVNb29uLzI4LjIuMkphdmEgRGVwbG95bWVudCBUb29sa2l0IDguMC4xODEwLjEzOkphdmEoVE0pIFBsYXRmb3JtIFNFIDggVTE4MTpWTEMgV2ViIFBsdWdpbjplbi1VU1wiLFwiRGV2aWNlUGxhdGZvcm1cIjpcIldpbjY0XCIsXCJDbGllbnRUaW1lem9uZVwiOlwiLTAzOjAwXCJ9LFwidXNlcm5hbWVcIjpcInNlcmdpb1wiLFwidXNlclBvb2xJZFwiOlwiXCIsXCJ0aW1lc3RhbXBcIjpcIjE1NDc0OTE4NjAyNDRcIn0iLCJzaWduYXR1cmUiOiJDMHB4ejFlU0ViZVROaHBLZW9OYXlVMU10L2ZOWUkyRHNoSTAzTjBkdEEwPSIsInZlcnNpb24iOiJKUzIwMTcxMTE1In0=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="signInSubmitButton" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">signInSubmitButton</stringProp>
                <stringProp name="Argument.value">Sign in</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">ex-admin-api.auth.us-east-1.amazoncognito.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/login?response_type=code&amp;client_id=5si0g8kp2bgdbc9nkd9uub4784&amp;redirect_uri=https://sergio:8080/ex-admin-api/auth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://ex-admin-api.auth.us-east-1.amazoncognito.com/login?response_type=code&amp;client_id=5si0g8kp2bgdbc9nkd9uub4784&amp;redirect_uri=https://sergio:8080/ex-admin-api/auth/token</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.9) Gecko/20100101 Goanna/4.1 Firefox/60.9 PaleMoon/28.2.2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">authorization header is empty to avoid token</stringProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor: id_token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">idToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">creditMatrix</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(idToken, ${idToken})};</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="130 /logout" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="response_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">response_type</stringProp>
                <stringProp name="Argument.value">code</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="Argument.value">5si0g8kp2bgdbc9nkd9uub4784</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="redirect_uri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">redirect_uri</stringProp>
                <stringProp name="Argument.value">https://sergio:8080/ex-admin-api/auth/token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">ex-admin-api.auth.us-east-1.amazoncognito.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logout</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://ex-admin-api.auth.us-east-1.amazoncognito.com/login?response_type=code&amp;client_id=5si0g8kp2bgdbc9nkd9uub4784&amp;redirect_uri=https://sergio:8080/ex-admin-api/auth/token</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.9) Gecko/20100101 Goanna/4.1 Firefox/60.9 PaleMoon/28.2.2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager: Set authorization" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__property(idToken)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get credit matrix" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get credit matrix" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${__P(ex.redis.path.live,live)}/${__P(ex.redis.path.live.creditmatrix,creditmatrix)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set creditMatrix variable with json response" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">creditMatrix</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through json response" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <stringProp name="TestPlan.comments">do not remove this. without a sampler the loop controler doesn&apos;t run</stringProp>
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Credit Matrix Data" enabled="true">
            <stringProp name="filename">creditmatrix.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">grantorFirmData,granteeFirmData,dealCodeTypeData,creditMethodData,creditPoolIdData,mnemonicData,refDataStatusData,cpDailyWarningLimitData,cpDailyLimitData,cpNopWarningLimitData,cpNopLimitData</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor: 1 attribute = 1 variable" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">grantorFirm;granteeFirm;dealCodeType;creditMethod;settleDates;utilizationAmounts;creditPoolId;mnemonic;refDataStatus;cpDailyWarningLimit;cpDailyLimit;cpNopWarningLimit;cpNopLimit </stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[${counter}].grantorFirm;$[${counter}].granteeFirm;$[${counter}].dealCodeType;$[${counter}].creditMethod;$[${counter}].settleDates;$[${counter}].utilizationAmounts;$[${counter}].creditPoolId;$[${counter}].mnemonic;$[${counter}].refDataStatus;$[${counter}].cpDailyWarningLimit;$[${counter}].cpDailyLimit;$[${counter}].cpNopWarningLimit;$[${counter}].cpNopLimit </stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">creditMatrix</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null;null;null;null;null;null;null;null;null;null;null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">String variables = &quot;grantorFirm;granteeFirm;dealCodeType;creditMethod;settleDates;utilizationAmounts;creditPoolId;mnemonic;refDataStatus;cpDailyWarningLimit;cpDailyLimit;cpNopWarningLimit;cpNopLimit&quot;;
for (String variable : variables.split(&quot;;&quot;)) {
	log.info(&quot;Variable &lt;&quot; + variable + &quot;&gt; values is: &lt;&quot; + vars.get(variable) + &quot;&gt;&quot;);
	if (vars.get(variable) == null || vars.get(variable).trim().length() == 0 ) {	
         vars.put(variable,&quot;null&quot;);
	}
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - grantorFirm" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2084666355">${grantorFirmData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">grantorFirm</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - granteeFirm" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1259653616">${granteeFirmData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">granteeFirm</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - dealCodeType" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="371977865">${dealCodeTypeData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dealCodeType</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - creditMethod" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="734504194">${creditMethodData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">creditMethod</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - settleDates" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1852468290">\[(\&quot;\d{8}\&quot;\,){0,4}\&quot;\d{8}\&quot;{0,1}\]</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">settleDates</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - utilizationAmounts" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-712232472">\[(\d{1,},){0,5}(\d{1,}){0,1}\]</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">utilizationAmounts</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - creditPoolId" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431692620">${creditPoolIdData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">creditPoolId</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - mnemonic" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="297854714">${mnemonicData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">mnemonic</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - refDataStatus" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1031740219">${refDataStatusData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">refDataStatus</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - cpDailyWarningLimit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-370770081">${cpDailyWarningLimitData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">cpDailyWarningLimit</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - cpDailyLimit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="850697709">${cpDailyLimitData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">cpDailyLimit</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - cpNopWarningLimit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1758842473">${cpNopWarningLimitData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">cpNopWarningLimit</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - cpNopLimit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2095564323">${cpNopLimitData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">cpNopLimit</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="App Type" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app type random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1474920185">isSessionBased</stringProp>
              <stringProp name="-1767061135">isSymbolBased</stringProp>
              <stringProp name="3373707">name</stringProp>
              <stringProp name="463927904">needRefChannelOne</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1460673532">
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="685792851">&quot;${__RandomString(4,${CHARSET})}&quot;</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="-81507146">${__P(ex.api.path.apptype,apptype)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create App Type" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;isSessionBased&quot;: ${isSessionBased},&#xd;
  &quot;isSymbolBased&quot;: ${isSymbolBased},&#xd;
  &quot;name&quot;: ${name},&#xd;
  &quot;needRefChannelOne&quot;: ${needRefChannelOne},&#xd;
  &quot;status&quot;: ${status}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="794249530">{&quot;id&quot;:${id},&quot;name&quot;:${name},&quot;isSymbolBased&quot;:${isSymbolBased},&quot;isSessionBased&quot;:${isSessionBased},&quot;needRefChannelOne&quot;:${needRefChannelOne},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App Type ${id} - ${name} was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="794249530">{&quot;id&quot;:${id},&quot;name&quot;:${name},&quot;isSymbolBased&quot;:${isSymbolBased},&quot;isSessionBased&quot;:${isSessionBased},&quot;needRefChannelOne&quot;:${needRefChannelOne},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1522114571">isSessionBased2</stringProp>
              <stringProp name="1055679713">isSymbolBased2</stringProp>
              <stringProp name="104584967">name2</stringProp>
              <stringProp name="1496863186">needRefChannelOne2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1313978764">
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="685792851">&quot;${__RandomString(4,${CHARSET})}&quot;</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update App Type ${id} - old name ${name} - new name ${name2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;isSessionBased&quot;: ${isSessionBased2},&#xd;
  &quot;isSymbolBased&quot;: ${isSymbolBased2},&#xd;
  &quot;name&quot;: ${name2},&#xd;
  &quot;needRefChannelOne&quot;: ${needRefChannelOne2},&#xd;
  &quot;status&quot;: ${status2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App Type ${id} - old name ${name} - new name ${name2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2038131184">{&quot;id&quot;:${id},&quot;name&quot;:${name2},&quot;isSymbolBased&quot;:${isSymbolBased2},&quot;isSessionBased&quot;:${isSessionBased2},&quot;needRefChannelOne&quot;:${needRefChannelOne2},&quot;status&quot;:${status2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete App Type ${id} ${name2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App Type ${id} - ${name2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="App Server" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app server random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1224577496">handle</stringProp>
              <stringProp name="-1591143228">internalIp</stringProp>
              <stringProp name="-1699764654">externalIp</stringProp>
              <stringProp name="-299803597">hostname</stringProp>
              <stringProp name="116076">uri</stringProp>
              <stringProp name="111551216">uriCg</stringProp>
              <stringProp name="-1180595223">isCore</stringProp>
              <stringProp name="-1180546553">isEdge</stringProp>
              <stringProp name="3240727">isBo</stringProp>
              <stringProp name="105008833">notes</stringProp>
              <stringProp name="-748916528">isActive</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-554284876">
                <stringProp name="1725786518">&quot;${__RandomString(12,${CHARSET})}&quot;</stringProp>
                <stringProp name="-833940838">&quot;${__RandomString(16,${CHARSET})}&quot;</stringProp>
                <stringProp name="-833940838">&quot;${__RandomString(16,${CHARSET})}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1470374442">&quot;${__RandomString(128,${CHARSET})}&quot;</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1275783992">${__P(ex.api.path.appserver,appserver)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create App server" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;externalIp&quot;: ${externalIp},&#xd;
  &quot;handle&quot;: ${handle},&#xd;
  &quot;hostname&quot;: ${hostname},&#xd;
  &quot;internalIp&quot;: ${internalIp},&#xd;
  &quot;isActive&quot;: ${isActive},&#xd;
  &quot;isBo&quot;: ${isBo},&#xd;
  &quot;isCore&quot;: ${isCore},&#xd;
  &quot;isEdge&quot;: ${isEdge},&#xd;
  &quot;notes&quot;: ${notes},&#xd;
  &quot;uri&quot;: ${uri},&#xd;
  &quot;uriCg&quot;: ${uriCg}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="947751564">{&quot;id&quot;:${id},&quot;handle&quot;:${handle},&quot;internalIp&quot;:${internalIp},&quot;externalIp&quot;:${externalIp},&quot;hostname&quot;:${hostname},&quot;uri&quot;:${uri},&quot;uriCg&quot;:${uriCg},&quot;isCore&quot;:${isCore},&quot;isEdge&quot;:${isEdge},&quot;isBo&quot;:${isBo},&quot;notes&quot;:${notes},&quot;isActive&quot;:${isActive}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App SErver ${id} - old handle ${handle} - new handle ${handle} was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="947751564">{&quot;id&quot;:${id},&quot;handle&quot;:${handle},&quot;internalIp&quot;:${internalIp},&quot;externalIp&quot;:${externalIp},&quot;hostname&quot;:${hostname},&quot;uri&quot;:${uri},&quot;uriCg&quot;:${uriCg},&quot;isCore&quot;:${isCore},&quot;isEdge&quot;:${isEdge},&quot;isBo&quot;:${isBo},&quot;notes&quot;:${notes},&quot;isActive&quot;:${isActive}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app server new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="692803338">handle2</stringProp>
              <stringProp name="-2080799762">internalIp2</stringProp>
              <stringProp name="-1153096672">externalIp2</stringProp>
              <stringProp name="-703976865">hostname2</stringProp>
              <stringProp name="3598406">uri2</stringProp>
              <stringProp name="-836879550">uriCg2</stringProp>
              <stringProp name="2056253801">isCore2</stringProp>
              <stringProp name="2057762571">isEdge2</stringProp>
              <stringProp name="100462587">isBo2</stringProp>
              <stringProp name="-1039693423">notes2</stringProp>
              <stringProp name="-1741575838">isActive2</stringProp>
              <stringProp name="-628669830">entityLocation2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-554284876">
                <stringProp name="1725786518">&quot;${__RandomString(12,${CHARSET})}&quot;</stringProp>
                <stringProp name="-833940838">&quot;${__RandomString(16,${CHARSET})}&quot;</stringProp>
                <stringProp name="-833940838">&quot;${__RandomString(16,${CHARSET})}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1470374442">&quot;${__RandomString(128,${CHARSET})}&quot;</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1275783992">${__P(ex.api.path.appserver,appserver)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update App server ${id} - old handle ${handle} - new handle ${handle2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;externalIp&quot;: ${externalIp2},&#xd;
  &quot;handle&quot;: ${handle2},&#xd;
  &quot;hostname&quot;: ${hostname2},&#xd;
  &quot;internalIp&quot;: ${internalIp2},&#xd;
  &quot;isActive&quot;: ${isActive2},&#xd;
  &quot;isBo&quot;: ${isBo2},&#xd;
  &quot;isCore&quot;: ${isCore2},&#xd;
  &quot;isEdge&quot;: ${isEdge2},&#xd;
  &quot;notes&quot;: ${notes2},&#xd;
  &quot;uri&quot;: ${uri2},&#xd;
  &quot;uriCg&quot;: ${uriCg2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App server ${id} - old handle ${handle} - new handle ${handle2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-896765690">{&quot;id&quot;:${id},&quot;handle&quot;:${handle2},&quot;internalIp&quot;:${internalIp2},&quot;externalIp&quot;:${externalIp2},&quot;hostname&quot;:${hostname2},&quot;uri&quot;:${uri2},&quot;uriCg&quot;:${uriCg2},&quot;isCore&quot;:${isCore2},&quot;isEdge&quot;:${isEdge2},&quot;isBo&quot;:${isBo2},&quot;notes&quot;:${notes2},&quot;isActive&quot;:${isActive2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete App server ${id} ${handle2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App jvm ${id} - ${handle2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="App JVM" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app server FK entity location" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-806766439">appServerLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1698833332">
                <stringProp name="-1275783992">${__P(ex.api.path.appserver,appserver)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get App servers" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${appServerLocation}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">firstServer</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].handle</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app jvm random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1224577496">handle</stringProp>
              <stringProp name="-905826493">server</stringProp>
              <stringProp name="546242782">launchName</stringProp>
              <stringProp name="-675110996">launchSeq</stringProp>
              <stringProp name="3682909">xmem</stringProp>
              <stringProp name="1762971624">jvmthreads</stringProp>
              <stringProp name="105008833">notes</stringProp>
              <stringProp name="341796569">logWait</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-776225743">
                <stringProp name="1725786518">&quot;${__RandomString(12,${CHARSET})}&quot;</stringProp>
                <stringProp name="-574535489">&quot;${firstServer}&quot;</stringProp>
                <stringProp name="-1873934505">&quot;${__RandomString(8,${CHARSET})}&quot;</stringProp>
                <stringProp name="-55960875">${__Random(1,${SHORT})}</stringProp>
                <stringProp name="-1873934505">&quot;${__RandomString(8,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1873934505">&quot;${__RandomString(8,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1470374442">&quot;${__RandomString(128,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1470374442">&quot;${__RandomString(128,${CHARSET})}&quot;</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="-1849589672">${__P(ex.api.path.appjvm,appjvm)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create App jvm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;handle&quot;: ${handle},&#xd;
  &quot;server&quot;: ${server},&#xd;
  &quot;launchName&quot;: ${launchName},&#xd;
  &quot;launchSeq&quot;: ${launchSeq},&#xd;
  &quot;xmem&quot;: ${xmem},&#xd;
  &quot;jvmthreads&quot;: ${jvmthreads},&#xd;
  &quot;notes&quot;: ${notes},&#xd;
  &quot;logWait&quot;: ${logWait},&#xd;
  &quot;status&quot;: ${status}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1456523288">{&quot;id&quot;:${id},&quot;handle&quot;:${handle},&quot;server&quot;:${server},&quot;launchName&quot;:${launchName},&quot;launchSeq&quot;:${launchSeq},&quot;xmem&quot;:${xmem},&quot;jvmthreads&quot;:${jvmthreads},&quot;notes&quot;:${notes},&quot;logWait&quot;:${logWait},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App jvm ${id} - old handle ${handle} - new handle ${handle} was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1456523288">{&quot;id&quot;:${id},&quot;handle&quot;:${handle},&quot;server&quot;:${server},&quot;launchName&quot;:${launchName},&quot;launchSeq&quot;:${launchSeq},&quot;xmem&quot;:${xmem},&quot;jvmthreads&quot;:${jvmthreads},&quot;notes&quot;:${notes},&quot;logWait&quot;:${logWait},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app jvm new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="692803338">handle2</stringProp>
              <stringProp name="1984149839">server2</stringProp>
              <stringProp name="-246342892">launchName2</stringProp>
              <stringProp name="546395654">launchSeq2</stringProp>
              <stringProp name="114170229">xmem2</stringProp>
              <stringProp name="-1182454454">jvmthreads2</stringProp>
              <stringProp name="-1039693423">notes2</stringProp>
              <stringProp name="2005759097">logWait2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1285205868">
                <stringProp name="1725786518">&quot;${__RandomString(12,${CHARSET})}&quot;</stringProp>
                <stringProp name="-574535489">&quot;${firstServer}&quot;</stringProp>
                <stringProp name="-1873934505">&quot;${__RandomString(8,${CHARSET})}&quot;</stringProp>
                <stringProp name="-55960875">${__Random(1,${SHORT})}</stringProp>
                <stringProp name="-1873934505">&quot;${__RandomString(8,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1873934505">&quot;${__RandomString(8,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1470374442">&quot;${__RandomString(128,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1470374442">&quot;${__RandomString(128,${CHARSET})}&quot;</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update App jvm ${id} - old handle ${handle} - new handle ${handle2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;handle&quot;: ${handle2},&#xd;
  &quot;server&quot;: ${server2},&#xd;
  &quot;launchName&quot;: ${launchName2},&#xd;
  &quot;launchSeq&quot;: ${launchSeq2},&#xd;
  &quot;xmem&quot;: ${xmem2},&#xd;
  &quot;jvmthreads&quot;: ${jvmthreads2},&#xd;
  &quot;notes&quot;: ${notes2},&#xd;
  &quot;logWait&quot;: ${logWait2},&#xd;
  &quot;status&quot;: ${status2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App jvm ${id} - old handle ${handle} - new handle ${handle2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="516877910">{&quot;id&quot;:${id},&quot;handle&quot;:${handle2},&quot;server&quot;:${server2},&quot;launchName&quot;:${launchName2},&quot;launchSeq&quot;:${launchSeq2},&quot;xmem&quot;:${xmem2},&quot;jvmthreads&quot;:${jvmthreads2},&quot;notes&quot;:${notes2},&quot;logWait&quot;:${logWait2},&quot;status&quot;:${status2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete App jvm ${id} ${handle2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App jvm ${id} - ${handle2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="App Instance" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app type and app jvm FK entity location" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-2041074027">appJvmLocation</stringProp>
              <stringProp name="-248750640">appTypeLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="594722348">
                <stringProp name="-1849589672">${__P(ex.api.path.appjvm,appjvm)}</stringProp>
                <stringProp name="-81507146">${__P(ex.api.path.apptype,apptype)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get App types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${appTypeLocation}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">firstAppType</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get App jvms" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${appJvmLocation}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">firstAppJvm</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].handle</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app instance random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="93028124">appId</stringProp>
              <stringProp name="-793934597">appType</stringProp>
              <stringProp name="-753228301">threadNumber</stringProp>
              <stringProp name="-549907503">firstJvm</stringProp>
              <stringProp name="-817620083">secondJvm</stringProp>
              <stringProp name="-1103888751">firstSequence</stringProp>
              <stringProp name="1338272853">secondSequence</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-680141981">
                <stringProp name="-594070827">&quot;${__RandomString(6,${CHARSET})}&quot;</stringProp>
                <stringProp name="1099714921">&quot;${firstAppType}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="-805136132">&quot;${firstAppJvm}&quot;</stringProp>
                <stringProp name="3392903">null</stringProp>
                <stringProp name="-185043594">${__Random(0,${SHORT})}</stringProp>
                <stringProp name="3392903">null</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="1879963884">${__P(ex.api.path.appinstance,appinstance)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create App instance" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot;: ${appId},&#xd;
  &quot;appType&quot;: ${appType},&#xd;
  &quot;threadNumber&quot;: ${threadNumber},&#xd;
  &quot;firstJvm&quot;: ${firstJvm},&#xd;
  &quot;secondJvm&quot;: ${secondJvm},&#xd;
  &quot;firstSequence&quot;: ${firstSequence},&#xd;
  &quot;secondSequence&quot;: ${secondSequence},&#xd;
  &quot;status&quot;: ${status}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1325178846">{&quot;id&quot;:${id},&quot;appId&quot;:${appId},&quot;appType&quot;:${appType},&quot;threadNumber&quot;:${threadNumber},&quot;firstJvm&quot;:${firstJvm},&quot;secondJvm&quot;:${secondJvm},&quot;firstSequence&quot;:${firstSequence},&quot;secondSequence&quot;:${secondSequence},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App instance ${id} - appId ${appId}  was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1325178846">{&quot;id&quot;:${id},&quot;appId&quot;:${appId},&quot;appType&quot;:${appType},&quot;threadNumber&quot;:${threadNumber},&quot;firstJvm&quot;:${firstJvm},&quot;secondJvm&quot;:${secondJvm},&quot;firstSequence&quot;:${firstSequence},&quot;secondSequence&quot;:${secondSequence},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create app instance new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1411095402">appId2</stringProp>
              <stringProp name="1157831319">appType2</stringProp>
              <stringProp name="-1875240801">threadNumber2</stringProp>
              <stringProp name="132736641">firstJvm2</stringProp>
              <stringProp name="423581253">secondJvm2</stringProp>
              <stringProp name="139187137">firstSequence2</stringProp>
              <stringProp name="-1463214467">secondSequence2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1278171911">
                <stringProp name="-594070827">&quot;${__RandomString(6,${CHARSET})}&quot;</stringProp>
                <stringProp name="1099714921">&quot;${firstAppType}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="3392903">null</stringProp>
                <stringProp name="-805136132">&quot;${firstAppJvm}&quot;</stringProp>
                <stringProp name="-185043594">${__Random(0,${SHORT})}</stringProp>
                <stringProp name="-185043594">${__Random(0,${SHORT})}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update App instance ${id} - old appId ${appId} - new appId ${appId2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot;: ${appId2},&#xd;
  &quot;appType&quot;: ${appType2},&#xd;
  &quot;threadNumber&quot;: ${threadNumber2},&#xd;
  &quot;firstJvm&quot;: ${firstJvm2},&#xd;
  &quot;secondJvm&quot;: ${secondJvm2},&#xd;
  &quot;firstSequence&quot;: ${firstSequence2},&#xd;
  &quot;secondSequence&quot;: ${secondSequence2},&#xd;
  &quot;status&quot;: ${status2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App instance ${id} - old appId ${appId} - new appId ${appId2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154568114">{&quot;id&quot;:${id},&quot;appId&quot;:${appId2},&quot;appType&quot;:${appType2},&quot;threadNumber&quot;:${threadNumber2},&quot;firstJvm&quot;:${firstJvm2},&quot;secondJvm&quot;:${secondJvm2},&quot;firstSequence&quot;:${firstSequence2},&quot;secondSequence&quot;:${secondSequence2},&quot;status&quot;:${status2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete App instance ${id} ${appId2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check App instance ${id} - ${appId2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Currency" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="3373707">name</stringProp>
              <stringProp name="-1503157500">amountDp</stringProp>
              <stringProp name="98602">cls</stringProp>
              <stringProp name="69860605">minQuantity</stringProp>
              <stringProp name="2006450493">minIncrement</stringProp>
              <stringProp name="353691378">lotSize</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="562777779">
                <stringProp name="-821758958">&quot;${__RandomString(3,${CHARSET})}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="338903160">${__P(ex.api.path.currency,currency)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create currency" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: ${name},&#xd;
  &quot;amountDp&quot;: ${amountDp},&#xd;
  &quot;cls&quot;: ${cls},&#xd;
  &quot;minQuantity&quot;: ${minQuantity},&#xd;
  &quot;minIncrement&quot;: ${minIncrement},&#xd;
  &quot;lotSize&quot;: ${lotSize},&#xd;
  &quot;status&quot;: ${status}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1248449632">{&quot;id&quot;:${id},&quot;name&quot;:${name},&quot;amountDp&quot;:${amountDp},&quot;cls&quot;:${cls},&quot;minQuantity&quot;:${minQuantity},&quot;minIncrement&quot;:${minIncrement},&quot;lotSize&quot;:${lotSize},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency ${id} - ${name} was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1248449632">{&quot;id&quot;:${id},&quot;name&quot;:${name},&quot;amountDp&quot;:${amountDp},&quot;cls&quot;:${cls},&quot;minQuantity&quot;:${minQuantity},&quot;minIncrement&quot;:${minIncrement},&quot;lotSize&quot;:${lotSize},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="104584967">name2</stringProp>
              <stringProp name="646757806">amountDp2</stringProp>
              <stringProp name="3056712">cls2</stringProp>
              <stringProp name="-2129288491">minQuantity2</stringProp>
              <stringProp name="2070423189">minIncrement2</stringProp>
              <stringProp name="-1920469120">lotSize2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="532869329">
                <stringProp name="-821758958">&quot;${__RandomString(3,${CHARSET})}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Currency ${id} - old name ${name} - new name ${name2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: ${name2},&#xd;
  &quot;amountDp&quot;: ${amountDp2},&#xd;
  &quot;cls&quot;: ${cls2},&#xd;
  &quot;minQuantity&quot;: ${minQuantity2},&#xd;
  &quot;minIncrement&quot;: ${minIncrement2},&#xd;
  &quot;lotSize&quot;: ${lotSize2},&#xd;
  &quot;status&quot;: ${status2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency ${id} - old name ${name} - new name ${name2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1251754214">{&quot;id&quot;:${id},&quot;name&quot;:${name2},&quot;amountDp&quot;:${amountDp2},&quot;cls&quot;:${cls2},&quot;minQuantity&quot;:${minQuantity2},&quot;minIncrement&quot;:${minIncrement2},&quot;lotSize&quot;:${lotSize2},&quot;status&quot;:${status2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Currency ${id} ${name2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency ${id} - ${name2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Currency Pair" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency FK entity location" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="487674598">currencyLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1223697795">
                <stringProp name="338903160">${__P(ex.api.path.currency,currency)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get currencies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${currencyLocation}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">firstCurrency;secondCurrency</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].name;$[1].name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default;No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency pair random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.*;

Random r = new Random();

vars.put(&quot;randomPrevClose&quot;,r.nextDouble().toString());
vars.put(&quot;randomAvgSpread&quot;,r.nextDouble().toString());</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="3373707">name</stringProp>
              <stringProp name="3048248">ccy1</stringProp>
              <stringProp name="3048249">ccy2</stringProp>
              <stringProp name="1931703988">isTradeable</stringProp>
              <stringProp name="219399508">daysToSpot</stringProp>
              <stringProp name="514753406">ratePrecision</stringProp>
              <stringProp name="1506226391">isDecimalized</stringProp>
              <stringProp name="100463520">isCls</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="-57642007">isEnableCollars</stringProp>
              <stringProp name="-867519611">prevClose</stringProp>
              <stringProp name="-329485595">avgSpread</stringProp>
              <stringProp name="895563197">avgOrderSize</stringProp>
              <stringProp name="2040046803">avgTradeSize</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="688929631">
                <stringProp name="-594070827">&quot;${__RandomString(6,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1637471155">&quot;${firstCurrency}&quot;</stringProp>
                <stringProp name="-268709597">&quot;${secondCurrency}&quot;</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="217652626">${randomPrevClose}</stringProp>
                <stringProp name="-283162062">${randomAvgSpread}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="821224760">${__P(ex.api.path.currencypair,currencypair)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Currency Pair" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: ${name},&#xd;
  &quot;ccy1&quot;: ${ccy1},&#xd;
  &quot;ccy2&quot;: ${ccy2},&#xd;
  &quot;isTradeable&quot;: ${isTradeable},&#xd;
  &quot;daysToSpot&quot;: ${daysToSpot},&#xd;
  &quot;ratePrecision&quot;: ${ratePrecision},&#xd;
  &quot;isDecimalized&quot;: ${isDecimalized},&#xd;
  &quot;isCls&quot;: ${isCls},&#xd;
  &quot;status&quot;: ${status},&#xd;
  &quot;isEnableCollars&quot;: ${isEnableCollars},&#xd;
  &quot;prevClose&quot;: ${randomPrevClose},&#xd;
  &quot;avgSpread&quot;: ${randomAvgSpread},&#xd;
  &quot;avgOrderSize&quot;: ${avgOrderSize},&#xd;
  &quot;avgTradeSize&quot;: ${avgTradeSize}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1901253222">{&quot;id&quot;:${id},&quot;name&quot;:${name},&quot;ccy1&quot;:${ccy1},&quot;ccy2&quot;:${ccy2},&quot;isTradeable&quot;:${isTradeable},&quot;daysToSpot&quot;:${daysToSpot},&quot;ratePrecision&quot;:${ratePrecision},&quot;isDecimalized&quot;:${isDecimalized},&quot;isCls&quot;:${isCls},&quot;status&quot;:${status},&quot;isEnableCollars&quot;:${isEnableCollars},&quot;prevClose&quot;:${prevClose},&quot;avgSpread&quot;:${avgSpread},&quot;avgOrderSize&quot;:${avgOrderSize},&quot;avgTradeSize&quot;:${avgTradeSize}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency pair ${id} - name ${name}  was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1901253222">{&quot;id&quot;:${id},&quot;name&quot;:${name},&quot;ccy1&quot;:${ccy1},&quot;ccy2&quot;:${ccy2},&quot;isTradeable&quot;:${isTradeable},&quot;daysToSpot&quot;:${daysToSpot},&quot;ratePrecision&quot;:${ratePrecision},&quot;isDecimalized&quot;:${isDecimalized},&quot;isCls&quot;:${isCls},&quot;status&quot;:${status},&quot;isEnableCollars&quot;:${isEnableCollars},&quot;prevClose&quot;:${prevClose},&quot;avgSpread&quot;:${avgSpread},&quot;avgOrderSize&quot;:${avgOrderSize},&quot;avgTradeSize&quot;:${avgTradeSize}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency pair new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.*;

Random r = new Random();

vars.put(&quot;randomPrevClose2&quot;,r.nextDouble().toString());
vars.put(&quot;randomAvgSpread2&quot;,r.nextDouble().toString());</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="104584967">name2</stringProp>
              <stringProp name="94495738">ccy12</stringProp>
              <stringProp name="94495769">ccy22</stringProp>
              <stringProp name="-246718466">isTradeable2</stringProp>
              <stringProp name="-1788549794">daysToSpot2</stringProp>
              <stringProp name="-1222513548">ratePrecision2</stringProp>
              <stringProp name="-551622085">isDecimalized2</stringProp>
              <stringProp name="-1180598126">isCls2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
              <stringProp name="-1786902167">isEnableCollars2</stringProp>
              <stringProp name="-1123304115">prevClose2</stringProp>
              <stringProp name="-1624118803">avgSpread2</stringProp>
              <stringProp name="1992655381">avgOrderSize2</stringProp>
              <stringProp name="-1183058497">avgTradeSize2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="340405343">
                <stringProp name="-594070827">&quot;${__RandomString(6,${CHARSET})}&quot;</stringProp>
                <stringProp name="-268709597">&quot;${secondCurrency}&quot;</stringProp>
                <stringProp name="-1637471155">&quot;${firstCurrency}&quot;</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="908922257">${__RandomFromMultipleVars(TRUE|FALSE)}</stringProp>
                <stringProp name="-1842705386">${randomPrevClose2}</stringProp>
                <stringProp name="-188091530">${randomAvgSpread2}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Currency Pair ${id} - old name ${name} - new name ${name2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: ${name2},&#xd;
  &quot;ccy1&quot;: ${ccy12},&#xd;
  &quot;ccy2&quot;: ${ccy22},&#xd;
  &quot;isTradeable&quot;: ${isTradeable2},&#xd;
  &quot;daysToSpot&quot;: ${daysToSpot2},&#xd;
  &quot;ratePrecision&quot;: ${ratePrecision2},&#xd;
  &quot;isDecimalized&quot;: ${isDecimalized2},&#xd;
  &quot;isCls&quot;: ${isCls2},&#xd;
  &quot;status&quot;: ${status2},&#xd;
  &quot;isEnableCollars&quot;: ${isEnableCollars2},&#xd;
  &quot;prevClose&quot;: ${prevClose2},&#xd;
  &quot;avgSpread&quot;: ${avgSpread2},&#xd;
  &quot;avgOrderSize&quot;: ${avgOrderSize2},&#xd;
  &quot;avgTradeSize&quot;: ${avgTradeSize2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency Pair ${id} - old name ${name} - new name ${name2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-457444358">{&quot;id&quot;:${id},&quot;name&quot;:${name2},&quot;ccy1&quot;:${ccy12},&quot;ccy2&quot;:${ccy22},&quot;isTradeable&quot;:${isTradeable2},&quot;daysToSpot&quot;:${daysToSpot2},&quot;ratePrecision&quot;:${ratePrecision2},&quot;isDecimalized&quot;:${isDecimalized2},&quot;isCls&quot;:${isCls2},&quot;status&quot;:${status2},&quot;isEnableCollars&quot;:${isEnableCollars2},&quot;prevClose&quot;:${prevClose2},&quot;avgSpread&quot;:${avgSpread2},&quot;avgOrderSize&quot;:${avgOrderSize2},&quot;avgTradeSize&quot;:${avgTradeSize2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Currency Pair ${id} ${name2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency Pair ${id} - ${name2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Currency Pair Settle Date" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency pair FK entity location" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="914726752">currencyPairLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1289373828">
                <stringProp name="821224760">${__P(ex.api.path.currencypair,currencypair)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get currency pairs" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${currencyPairLocation}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">currencyPair;currencyPair2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].name;$[1].name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default;No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency pair settle date random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1005147787">currencyPair</stringProp>
              <stringProp name="752419634">tradeDate</stringProp>
              <stringProp name="72603545">settleDate</stringProp>
              <stringProp name="-872553">holidayCount</stringProp>
              <stringProp name="105008833">notes</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="-295931082">updateTime</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-2082026454">
                <stringProp name="-2106807351">&quot;${currencyPair}&quot;</stringProp>
                <stringProp name="-1816714480">&quot;${__RandomDate(,,9999-01-01,,)}&quot;</stringProp>
                <stringProp name="-1816714480">&quot;${__RandomDate(,,9999-01-01,,)}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="-2106748045">&quot;${__RandomString(64,${CHARSET})}&quot;</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="-1305892191">&quot;${__RandomDate(,,2038-01-18,,)} ${__time(HH:mm:ss,)}&quot;</stringProp>
                <stringProp name="-1723630632">${__P(ex.api.path.currencypairsettledate,currencypairsettledate)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Currency Pair settle date" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;currencyPair&quot;: ${currencyPair},&#xd;
   &quot;tradeDate&quot;: ${tradeDate},&#xd;
   &quot;settleDate&quot;: ${settleDate},&#xd;
   &quot;holidayCount&quot;: ${holidayCount},&#xd;
   &quot;notes&quot;: ${notes},&#xd;
   &quot;status&quot;: ${status},&#xd;
   &quot;updateTime&quot;: ${updateTime}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-850843478">{&quot;id&quot;:&quot;${id},&quot;currencyPair&quot;:${currencyPair},&quot;tradeDate&quot;:${tradeDate},&quot;settleDate&quot;:${settleDate},&quot;holidayCount&quot;:${holidayCount},&quot;notes&quot;:${notes},&quot;status&quot;:${status},&quot;updateTime&quot;:${updateTime}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency pair settle date ${id} - currencyPair ${currencyPair} tradeDate ${tradeDate}  was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-850843478">{&quot;id&quot;:&quot;${id},&quot;currencyPair&quot;:${currencyPair},&quot;tradeDate&quot;:${tradeDate},&quot;settleDate&quot;:${settleDate},&quot;holidayCount&quot;:${holidayCount},&quot;notes&quot;:${notes},&quot;status&quot;:${status},&quot;updateTime&quot;:${updateTime}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency pair settle date new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1094810375">currencyPair2</stringProp>
              <stringProp name="1850172224">tradeDate2</stringProp>
              <stringProp name="-2044257351">settleDate2</stringProp>
              <stringProp name="-27049093">holidayCount2</stringProp>
              <stringProp name="-1039693423">notes2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
              <stringProp name="-583928900">updateTime2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1254826301">
                <stringProp name="-886587661">&quot;${currencyPair2}&quot;</stringProp>
                <stringProp name="-1816714480">&quot;${__RandomDate(,,9999-01-01,,)}&quot;</stringProp>
                <stringProp name="-1816714480">&quot;${__RandomDate(,,9999-01-01,,)}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="-2106748045">&quot;${__RandomString(64,${CHARSET})}&quot;</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="-1305892191">&quot;${__RandomDate(,,2038-01-18,,)} ${__time(HH:mm:ss,)}&quot;</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Currency Pair settle date ${id} - old currencyPair ${currencyPair} tradeDate ${tradeDate} - new currencyPair ${currencyPair2} tradeDate ${tradeDate2} " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;currencyPair&quot;: ${currencyPair2},&#xd;
   &quot;tradeDate&quot;: ${tradeDate2},&#xd;
   &quot;settleDate&quot;: ${settleDate2},&#xd;
   &quot;holidayCount&quot;: ${holidayCount2},&#xd;
   &quot;notes&quot;: ${notes2},&#xd;
   &quot;status&quot;: ${status2},&#xd;
   &quot;updateTime&quot;: ${updateTime2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency Pair settle date ${id} -  old currencyPair ${currencyPair} tradeDate ${tradeDate} - new currencyPair ${currencyPair2} tradeDate ${tradeDate2}  was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1819328256">{&quot;id&quot;:&quot;${id},&quot;currencyPair&quot;:${currencyPair2},&quot;tradeDate&quot;:${tradeDate2},&quot;settleDate&quot;:${settleDate2},&quot;holidayCount&quot;:${holidayCount2},&quot;notes&quot;:${notes2},&quot;status&quot;:${status2},&quot;updateTime&quot;:${updateTime2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Currency Pair settle date ${id}  ${currencyPair2}  ${tradeDate2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Currency Pair settle date ${id} ${currencyPair2}  ${tradeDate2}  was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Firm" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create Firm random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1224577496">handle</stringProp>
              <stringProp name="-1470420798">mnemonic</stringProp>
              <stringProp name="3373707">name</stringProp>
              <stringProp name="-556356968">firmType</stringProp>
              <stringProp name="100468587">isHub</stringProp>
              <stringProp name="-633621980">isPrincipal</stringProp>
              <stringProp name="3241148">isPb</stringProp>
              <stringProp name="2071193896">isSubpb</stringProp>
              <stringProp name="-69871705">isPbClient</stringProp>
              <stringProp name="563235603">isSubpbClient</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1968044009">
                <stringProp name="1725786518">&quot;${__RandomString(12,${CHARSET})}&quot;</stringProp>
                <stringProp name="-833940838">&quot;${__RandomString(16,${CHARSET})}&quot;</stringProp>
                <stringProp name="-2106748045">&quot;${__RandomString(64,${CHARSET})}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="-913425896">${__P(ex.api.path.firm,firm)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Firm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;handle&quot;: ${handle},&#xd;
  &quot;mnemonic&quot;: ${mnemonic},&#xd;
  &quot;name&quot;: ${name},&#xd;
  &quot;firmType&quot;: ${firmType},&#xd;
  &quot;isHub&quot;: ${isHub},&#xd;
  &quot;isPrincipal&quot;: ${isPrincipal},&#xd;
  &quot;isPb&quot;: ${isPb},&#xd;
  &quot;isSubpb&quot;: ${isSubpb},&#xd;
  &quot;isPbClient&quot;: ${isPbClient},&#xd;
  &quot;isSubpbClient&quot;: ${isSubpbClient},&#xd;
  &quot;status&quot;: ${status}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1196838126">{&quot;id&quot;:${id},&quot;handle&quot;:${handle},&quot;mnemonic&quot;:${mnemonic},&quot;name&quot;:${name},&quot;firmType&quot;:${firmType},&quot;isHub&quot;:${isHub},&quot;isPrincipal&quot;:${isPrincipal},&quot;isPb&quot;:${isPb},&quot;isSubpb&quot;:${isSubpb},&quot;isPbClient&quot;:${isPbClient},&quot;isSubpbClient&quot;:${isSubpbClient},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Firm ${id} - ${handle} was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1196838126">{&quot;id&quot;:${id},&quot;handle&quot;:${handle},&quot;mnemonic&quot;:${mnemonic},&quot;name&quot;:${name},&quot;firmType&quot;:${firmType},&quot;isHub&quot;:${isHub},&quot;isPrincipal&quot;:${isPrincipal},&quot;isPb&quot;:${isPb},&quot;isSubpb&quot;:${isSubpb},&quot;isPbClient&quot;:${isPbClient},&quot;isSubpbClient&quot;:${isSubpbClient},&quot;status&quot;:${status}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="692803338">handle2</stringProp>
              <stringProp name="1661595568">mnemonic2</stringProp>
              <stringProp name="104584967">name2</stringProp>
              <stringProp name="-67196774">firmType2</stringProp>
              <stringProp name="-1180441049">isHub2</stringProp>
              <stringProp name="1832555150">isPrincipal2</stringProp>
              <stringProp name="100475638">isPb2</stringProp>
              <stringProp name="-217498614">isSubpb2</stringProp>
              <stringProp name="2128944491">isPbClient2</stringProp>
              <stringProp name="280434559">isSubpbClient2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-744510170">
                <stringProp name="1725786518">&quot;${__RandomString(12,${CHARSET})}&quot;</stringProp>
                <stringProp name="-833940838">&quot;${__RandomString(16,${CHARSET})}&quot;</stringProp>
                <stringProp name="-2106748045">&quot;${__RandomString(64,${CHARSET})}&quot;</stringProp>
                <stringProp name="1746016232">${__Random(0,${BYTE})}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Firm ${id} - old handle ${handle} - new handle ${handle}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;handle&quot;: ${handle2},&#xd;
  &quot;mnemonic&quot;: ${mnemonic2},&#xd;
  &quot;name&quot;: ${name2},&#xd;
  &quot;firmType&quot;: ${firmType2},&#xd;
  &quot;isHub&quot;: ${isHub2},&#xd;
  &quot;isPrincipal&quot;: ${isPrincipal2},&#xd;
  &quot;isPb&quot;: ${isPb2},&#xd;
  &quot;isSubpb&quot;: ${isSubpb2},&#xd;
  &quot;isPbClient&quot;: ${isPbClient2},&#xd;
  &quot;isSubpbClient&quot;: ${isSubpbClient2},&#xd;
  &quot;status&quot;: ${status2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Firm ${id} - old handle ${handle} - new handle ${handle2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1540589872">{&quot;id&quot;:${id},&quot;handle&quot;:${handle2},&quot;mnemonic&quot;:${mnemonic2},&quot;name&quot;:${name2},&quot;firmType&quot;:${firmType2},&quot;isHub&quot;:${isHub2},&quot;isPrincipal&quot;:${isPrincipal2},&quot;isPb&quot;:${isPb2},&quot;isSubpb&quot;:${isSubpb2},&quot;isPbClient&quot;:${isPbClient2},&quot;isSubpbClient&quot;:${isSubpbClient2},&quot;status&quot;:${status2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Firm ${id} ${handle2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Firm ${id} - ${handle2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Holiday" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1263499650000</longProp>
        <longProp name="ThreadGroup.end_time">1263499650000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create currency FK entity location" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="487674598">currencyLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1223697795">
                <stringProp name="338903160">${__P(ex.api.path.currency,currency)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get currencies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${currencyLocation}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">firstCurrency</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create Holiday random values and set variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="575402001">currency</stringProp>
              <stringProp name="-1724546052">description</stringProp>
              <stringProp name="3076014">date</stringProp>
              <stringProp name="-892481550">status</stringProp>
              <stringProp name="351608024">version</stringProp>
              <stringProp name="-295931082">updateTime</stringProp>
              <stringProp name="-295891916">updateUser</stringProp>
              <stringProp name="1642288312">entityLocation</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-265018697">
                <stringProp name="-1637471155">&quot;${firstCurrency}&quot;</stringProp>
                <stringProp name="963513488">&quot;${__RandomString(50,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1816714480">&quot;${__RandomDate(,,9999-01-01,,)}&quot;</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-1305892191">&quot;${__RandomDate(,,2038-01-18,,)} ${__time(HH:mm:ss,)}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1905715152">${__P(ex.api.path.holiday,holiday)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Holiday" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;currency&quot;: ${currency},&#xd;
  &quot;description&quot;: ${description},&#xd;
  &quot;date&quot;: ${date},&#xd;
  &quot;status&quot;: ${status},&#xd;
  &quot;version&quot;: ${version},&#xd;
  &quot;updateTime&quot;: ${updateTime},&#xd;
  &quot;updateUser&quot;: ${updateUser}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - location" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="745230878">Location: ${__P(locationHeader,/)}/${entityLocation}/${id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1706735340">{&quot;id&quot;:${id},&quot;currency&quot;:${currency},&quot;description&quot;:${description},&quot;date&quot;:${date},&quot;status&quot;:${status},&quot;version&quot;:${version},&quot;updateTime&quot;:${updateTime},&quot;updateUser&quot;:${updateUser}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Holiday ${id} - currency ${currency} date ${date}  was created OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1706735340">{&quot;id&quot;:${id},&quot;currency&quot;:${currency},&quot;description&quot;:${description},&quot;date&quot;:${date},&quot;status&quot;:${status},&quot;version&quot;:${version},&quot;updateTime&quot;:${updateTime},&quot;updateUser&quot;:${updateUser}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Create holiday new random values for update" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="657592897">currency2</stringProp>
              <stringProp name="-1921320010">description2</stringProp>
              <stringProp name="95356484">date2</stringProp>
              <stringProp name="-1897124224">status2</stringProp>
              <stringProp name="-1985053094">version2</stringProp>
              <stringProp name="-583928900">updateTime2</stringProp>
              <stringProp name="-582714754">updateUser2</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1888102531">
                <stringProp name="-1637471155">&quot;${firstCurrency}&quot;</stringProp>
                <stringProp name="963513488">&quot;${__RandomString(50,${CHARSET})}&quot;</stringProp>
                <stringProp name="-1816714480">&quot;${__RandomDate(,,9999-01-01,,)}&quot;</stringProp>
                <stringProp name="2030073905">&quot;${__RandomFromMultipleVars(ENABLED|DISABLED)}&quot;</stringProp>
                <stringProp name="-974094028">${__Random(0,${INTEGER})}</stringProp>
                <stringProp name="-1305892191">&quot;${__RandomDate(,,2038-01-18,,)} ${__time(HH:mm:ss,)}&quot;</stringProp>
                <stringProp name="704718164">&quot;${__RandomString(32,${CHARSET})}&quot;</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Holiday ${id} - old currency ${currency} date ${date}- new currency ${currency2} date ${date2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;currency&quot;: ${currency2},&#xd;
  &quot;description&quot;: ${description2},&#xd;
  &quot;date&quot;: ${date2},&#xd;
  &quot;status&quot;: ${status2},&#xd;
  &quot;version&quot;: ${version2},&#xd;
  &quot;updateTime&quot;: ${updateTime2},&#xd;
  &quot;updateUser&quot;: ${updateUser2}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${__P(ex.http.content.type,application/json)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Holiday ${id} - old currency ${currency} date ${date}- new currency ${currency2} date ${date2} was updated OK" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1872884418">{&quot;id&quot;:${id},&quot;currency&quot;:${currency2},&quot;description&quot;:${description2},&quot;date&quot;:${date2},&quot;status&quot;:${status2},&quot;version&quot;:${version2},&quot;updateTime&quot;:${updateTime2},&quot;updateUser&quot;:${updateUser2}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Holiday ${id} currency ${currency2} date ${date2}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Holiday ${id} currency ${currency2} date ${date2} was deleted" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/${entityLocation}/${id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Web Sockets" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers"/>
        </HeaderManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables - CHANGEME" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="wsTopic" elementType="Argument">
              <stringProp name="Argument.name">wsTopic</stringProp>
              <stringProp name="Argument.value">/topic/news.local.1234</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wsToken" elementType="Argument">
              <stringProp name="Argument.name">wsToken</stringProp>
              <stringProp name="Argument.value">xxxxxxxxxxxTOKENxxxxxxxxxx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ReadLoopCount" elementType="Argument">
              <stringProp name="Argument.name">ReadLoopCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get the current topic count" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/stats/sockets/topics/count</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set topicCount1 variable" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">topicCount1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$./data/live/lastsales/2</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Connect" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set STOMP Connect (BeanShell)" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Connect PreProcessor&quot;);

String s = &quot;CONNECT\n&quot; +       
                   &quot;accept-version:1.1,1.0\n&quot; +
                   &quot;heart-beat:0,0\n&quot; +      // note: Heartbest 0 as JMeter script can&apos;t commit to send or receive within specific time periods
                   &quot;\n&quot; + 
                   &apos;\0&apos;  // note: NULL char at end
                   ;
 
vars.put(&quot;wsStompData&quot;, s);         
        
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler - CONNECT" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server">${__P(ex.server.address,localhost)}</stringProp>
            <stringProp name="port">${__P(ex.server.port,8080)}</stringProp>
            <stringProp name="path">/${__P(ex.server.context-path,/)}/data/live/</stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">${wsStompData}
</stringProp>
            <boolProp name="createNewConnection">true</boolProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1 /ex-admin-api/auth/favicon.ico" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">sergio</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ex-admin-api/auth/favicon.ico</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">es,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 YaBrowser/18.11.1.805 Yowser/2.5 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 /success.txt" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/${ReadLoopCount}100101 Firefox/64.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3 /success.txt" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/${ReadLoopCount}100101 Firefox/64.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 /success.txt" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/${ReadLoopCount}100101 Firefox/64.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5 /success.txt" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/${ReadLoopCount}100101 Firefox/64.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6 /success.txt" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/${ReadLoopCount}100101 Firefox/64.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Connect to topic" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">@Grab(group=&apos;org.eclipse.jetty.websocket&apos;, module=&apos;websocket-client&apos;, version=&apos;9.2.0.M1&apos;, ext=&apos;jar&apos;)
@Grab(group=&apos;org.slf4j&apos;, module=&apos;slf4j-api&apos;, version=&apos;1.7.7&apos;)
@Grab(group=&apos;org.slf4j&apos;, module=&apos;slf4j-simple&apos;, version=&apos;1.7.7&apos;)

import java.nio.ByteBuffer;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.eclipse.jetty.websocket.api.Session;
import org.eclipse.jetty.websocket.api.StatusCode;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;
import org.eclipse.jetty.websocket.api.annotations.WebSocket;
import org.eclipse.jetty.websocket.client.WebSocketClient;
import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@WebSocket
public class MQTTWebSocket {

    private static final Logger LOG = LoggerFactory.getLogger(MQTTWebSocket.class);

    private Session session;

    private final CountDownLatch connectSentLatch;

    public MQTTWebSocket() {
        this.connectSentLatch = new CountDownLatch(1);
    }

    @OnWebSocketClose
    public void onClose(int statusCode, String reason) {
        System.out.printf(&quot;onClose - Connection closed: %d - %s%n&quot;, statusCode, reason);
        this.session = null;
    }

    @OnWebSocketConnect
    public void onConnect(Session session) throws IOException {
        System.out.println(&quot;onConnect - Got connect&quot;);
        this.session = session;

        //Trivial MQTT Connect message
//        assertEquals(12, out.readByte()); //remaining length
//        verifyString(&quot;MQIsdp&quot;, out);
//        assertEquals(0x03, out.readByte()); //protocol version
//        assertEquals(0x32, out.readByte()); //flags
//        assertEquals(2, out.readByte()); //keepAliveTimer msb
//        assertEquals(0, out.readByte()); //keepAliveTimer lsb

        byte[] rawMsg = [ 0x10, //message type
                          0x11, //remaining length 17 bytes
                          0x00, 0x06, //MQIspd length
                          &apos;M&apos; as char, &apos;Q&apos; as char, &apos;I&apos; as char, &apos;s&apos; as char,&apos;d&apos; as char, &apos;p&apos; as char,
                          0x03, //protocol version
                          0x32, //flags
                          0x00, 0x0A,// keepAlive Timer, 10 seconds
                          0x00, 0x03, 0x41, 0x42, 0x43 // A, B, C as client ID
        ] as byte[]
        ByteBuffer msg = ByteBuffer.wrap(rawMsg);

        //DBG
        println &quot;onConnect - send bytes &quot; + rawMsg.encodeHex().toString()
        //DBG

//        try {
        session.getRemote().sendBytes(msg);
        println(&quot;onConnect - Sent connect bytes&quot;);
        this.connectSentLatch.countDown();
        //session.close(StatusCode.NORMAL, &quot;I&apos;m done&quot;);
        println(&quot;onConnect - After connect&quot;);

        println &quot;send disconnect&quot;
        disconnect()
    }

    public boolean awaitConnected(int duration, TimeUnit unit) throws InterruptedException {
        return this.connectSentLatch.await(duration, unit);
    }

    /**
     * Send a disconnect message to the server
     * */
    public void disconnect() {
        byte[] rawMsg = [0xE0, 0x00] as byte[]
        println &quot;disconnect - send bytes &quot; + rawMsg.encodeHex().toString()
        ByteBuffer msg = ByteBuffer.wrap(rawMsg);
        this.session.getRemote().sendBytes(msg)
    }

    @OnWebSocketMessage
    public void onMessage(Session session, byte[] buf, int offset, int length) {
        System.out.printf(&quot;onMessage - Got msg: %s%n&quot;, buf);
    }

    @OnWebSocketError
    public void onError(Session session, Throwable cause) {
        System.out.printf(&quot;onError - Got exception: %s%n&quot;, cause);
    }
}


String destUri = &quot;ws://sergio:9999/ex-admin-api/data/live&quot;
//String destUri = &quot;ws://test.mosquitto.org:8080/&quot;
WebSocketClient client = new WebSocketClient()
MQTTWebSocket socket = new MQTTWebSocket();
client.start();
URI echoUri = new URI(destUri);
ClientUpgradeRequest request = new ClientUpgradeRequest();
client.connect(socket, echoUri, request);
println &quot;main - Connecting to : ${echoUri}&quot;
boolean connected = socket.awaitConnected(4, TimeUnit.SECONDS);
println &quot;main - After wait for awaitConnected was ${connected}&quot;</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify that the topic count was incremented" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/stats/sockets/topics/count</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set topicCount2 variable" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">topicCount2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$./data/live/lastsales/2</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - topicCount2" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2036551727">${__intSum(${topicCount1},1)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">topicCount2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Disconnect" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">String baseDir = FileServer.getFileServer().getBaseDir();
load(baseDir+&apos;/sockjs-0.3.4.js&apos;);
load(baseDir+/&apos;stomp.js&apos;);

var socket = new SockJS(&apos;/ex-admin-api/data/live/&apos;);
stompClient = Stomp.over(socket);  
stompClient.connect({}, function(frame) {
	setConnected(true);
     stompClient.subscribe(&apos;/data/live/fixfillstobrokers&apos;, function(messageOutput) {
         showMessageOutput(JSON.parse(messageOutput.body));
     });
});</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify that the topic was decremented" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(ex.server.address,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(ex.server.port,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(ex.server.protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${__P(ex.content.type,UTF-8)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(ex.server.context-path,/)}/stats/sockets/topics/count</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="set creditMatrix variable with json response" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">creditMatrix</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Http Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - content type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1566567821">Content-Type: ${__P(ex.http.content.type,application/json)}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="web sockets2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504180848000</longProp>
        <longProp name="ThreadGroup.end_time">1504180848000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Read" enabled="true"/>
        <hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler - Consume STOMP Connection Response" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="readTimeout">60000</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2087582999">CONNECTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Subscribe" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set STOMP Subscribe (BeanShell)" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
String s = &quot;SUBSCRIBE\n&quot; +
                    &quot;priority:4\n&quot; +
                    &quot;id:sub-0\n&quot; +
                    &quot;destination:${wsTopic}\n&quot; +
                    &quot;\n&quot; +
                    &apos;\0&apos;  // note: NULL char at end
                    ;

vars.put(&quot;wsStompData&quot;, s);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Subscribe" enabled="true">
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">myws-test.iceflo.net</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/stomp</stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">${wsStompData}
</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${ReadLoopCount}</stringProp>
        </LoopController>
        <hashTree>
          <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Read" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Clear WS Variables (Beanshell)" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
vars.put(&quot;wsType&quot;, &quot;&quot;);
vars.put(&quot;wsMessage&quot;, &quot;&quot;);

System.out.println(&quot;Reading from WS topic&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler - STOMP Subsription Response" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="optional">true</boolProp>
              <stringProp name="readTimeout">10000</stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Handle WS Message and Extract Type and Body (Beanshell)" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
String  dataString = prev.getResponseDataAsString();

System.out.println(&quot;Message[&quot;+dataString+&quot;]&quot;);

String[] parts = dataString.split(&quot;\n&quot;);

if (parts.length &gt;= 11) {
      String rType = parts[0];
      String rBody = parts[10];
      System.out.println(&quot;Body [&quot;+rBody+&quot;]&quot;);

      vars.put(&quot;wsType&quot;, rType);
      vars.put(&quot;wsMessage&quot;, rBody);

      System.out.println(&quot;Got Message type[&quot;+rType+&quot;] body[&quot;+rBody+&quot;]&quot;);

}
	              </stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Message Received?" enabled="true">
            <stringProp name="IfController.condition">&quot;${wsType}&quot; == &quot;MESSAGE&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${webDomain}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${webURI}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">false</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">true</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
